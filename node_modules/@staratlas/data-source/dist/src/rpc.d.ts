import { ClientSubscriptionId, Connection, GetProgramAccountsFilter, PublicKey, TransactionConfirmationStatus, TransactionSignature } from '@solana/web3.js';
import { Idl } from '@staratlas/anchor';
import { Account, AccountStatic, DecodedAccountData } from './account';
import { DataSource } from './dataSource';
import { ProgramMethods } from './listenProgam';
export declare function buildRPCDataSource(connection: Connection): DataSource;
export declare function readAllFromRPC<A extends Account, IDL extends Idl>(connection: Connection, program: ProgramMethods<IDL>, accountClass: AccountStatic<A, IDL>, commitment?: TransactionConfirmationStatus, additionalFilters?: GetProgramAccountsFilter[]): Promise<DecodedAccountData<A>[]>;
export declare function readFromRPC<A extends Account, IDL extends Idl>(connection: Connection, program: ProgramMethods<IDL>, key: PublicKey, accountClass: AccountStatic<A, IDL>, commitment?: TransactionConfirmationStatus): Promise<DecodedAccountData<A>>;
export declare function readFromRPCOrError<A extends Account, IDL extends Idl>(connection: Connection, program: ProgramMethods<IDL>, key: PublicKey, accountClass: AccountStatic<A, IDL>, commitment?: TransactionConfirmationStatus): Promise<A>;
export declare function readFromRPCNullable<A extends Account, IDL extends Idl>(connection: Connection, program: ProgramMethods<IDL>, key: PublicKey, accountClass: AccountStatic<A, IDL>, commitment?: TransactionConfirmationStatus): Promise<A | null>;
export declare function accountRPCSubscribe<A extends Account, IDL extends Idl>(connection: Connection, program: ProgramMethods<IDL>, key: PublicKey, accountClass: AccountStatic<A, IDL>, callback: (data: DecodedAccountData<A>) => void, commitment?: TransactionConfirmationStatus): ClientSubscriptionId;
export declare function airdrop(connection: Connection, wallet: PublicKey, lamports?: number, commitment?: TransactionConfirmationStatus): Promise<TransactionSignature>;
/**
 * Read multiple accounts from the RPC
 * @param accountsToRead - array of keys of accounts to read
 * @param connection - Solana connection object
 * @param program - the program that owns the accounts
 * @param accountClass - the account class
 * @param commitment - the Solana commitment level
 * @returns an array of the decoded accounts
 */
export declare function readMultipleFromRPC<A extends Account, IDL extends Idl>(accountsToRead: PublicKey[], connection: Connection, program: ProgramMethods<IDL>, accountClass: AccountStatic<A, IDL>, commitment?: TransactionConfirmationStatus): Promise<DecodedAccountData<A>[]>;
/**
 * Get current timestamp on chain
 * @param connection - the Solana connection object
 * @returns current timestamp on chain
 */
export declare const getCurrentTimestampOnChain: (connection: Connection) => Promise<bigint>;
//# sourceMappingURL=rpc.d.ts.map