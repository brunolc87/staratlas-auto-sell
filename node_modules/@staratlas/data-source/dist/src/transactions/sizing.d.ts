import { AddressLookupTableAccount, PublicKey } from '@solana/web3.js';
import { Result } from 'neverthrow';
import { AsyncSigner } from '../asyncSigner';
import { ConnectionOrRbh, InstructionReturn, InstructionWithSigners, TransactionReturn } from './transactionHandling';
export declare const MAX_TRANSACTION_SIZE = 1232;
export declare const MAX_UNIQUE_KEYS_COUNT = 128;
export declare function containedInLUTCount(keys: Set<string>, lookupTableAddresses: Set<string>): [number, Set<string>];
type TransactionSize = {
    size: number;
    lookupTables: AddressLookupTableAccount[];
    uniqueKeyCount: number;
};
export declare function getTransactionSize(instructions: InstructionWithSigners[], funder: PublicKey, lookupTables?: [Set<string>, AddressLookupTableAccount][]): TransactionSize;
export declare const insert: <T>(arr: T[], index: number, newItem: T) => T[];
export declare const deepCopyInstructions: (instructions: InstructionsWithSignersAndLUTs) => InstructionsWithSignersAndLUTs;
export type InstructionsWithSignersAndLUTs = {
    instructions: InstructionWithSigners[];
    lookupTables: AddressLookupTableAccount[];
};
export declare function buildLookupTableSet(lookupTables: AddressLookupTableAccount[]): [Set<string>, AddressLookupTableAccount][];
export declare function getNextFullTransaction(instructions: InstructionReturn[], feePayer: AsyncSigner, beforeIxs?: InstructionReturn[], afterIxs?: InstructionReturn[], lookupTables?: AddressLookupTableAccount[], maxInstructionCount?: number): Promise<Result<[InstructionsWithSignersAndLUTs, number], string>>;
export declare function buildDynamicTransactionsNoSigning(instructions: InstructionReturn | InstructionReturn[], feePayer: AsyncSigner, beforeIxs?: InstructionReturn | InstructionReturn[], afterIxs?: InstructionReturn | InstructionReturn[], lookupTables?: AddressLookupTableAccount[], maxInstructionCount?: number): Promise<Result<InstructionsWithSignersAndLUTs[], string>>;
/**
 * Builds dynamic transactions from a set of instructions, fee payer, connection, and optional before/after instructions.
 *
 * @param instructions - The main instructions to include in the transactions.
 * @param feePayer - The fee payer for the transactions.
 * @param connectionOrRbh - The connection information or recent blockhash with expiry and commitment.
 * @param beforeIxs - Optional instructions to include at the beginning of each transaction.
 * @param afterIxs - Optional instructions to include at the end of each transaction.
 * @param lookupTables - Optional list of lookup tables to try to build transactions with.
 * @param maxInstructionCount - The maximum number of instructions to include in each transaction.
 * @returns A promise that resolves to a result object containing either the built transactions or an error message.
 */
export declare function buildDynamicTransactions(instructions: InstructionReturn | InstructionReturn[], feePayer: AsyncSigner, connectionOrRbh: ConnectionOrRbh, beforeIxs?: InstructionReturn | InstructionReturn[], afterIxs?: InstructionReturn | InstructionReturn[], lookupTables?: AddressLookupTableAccount[], maxInstructionCount?: number): Promise<Result<TransactionReturn[], string>>;
export {};
//# sourceMappingURL=sizing.d.ts.map