import { Account as TokenAccount } from '@solana/spl-token';
import { Connection, PublicKey } from '@solana/web3.js';
import { AsyncSigner, InstructionReturn } from '.';
/**
 * Fetch all the parsed token accounts owned by the specified account
 *
 * Better than `connection.getTokenAccountsByOwner` or `connection.getParsedTokenAccountsByOwner`
 * as it properly decodes the token accounts using the more modern `unpackAccount`.
 *
 * @param connection - Solana connection object
 * @param owner - the token accounts owner
 * @param programId - the token program id
 * @returns the parsed token accounts for the given owner
 */
export declare const getParsedTokenAccountsByOwner: (connection: Connection, owner: PublicKey, programId?: PublicKey) => Promise<TokenAccount[]>;
export declare function createMint(mint: AsyncSigner, decimals: number, mintAuthority: PublicKey, freezeAuthority: PublicKey | null): InstructionReturn;
export declare function createTokenAccount(account: AsyncSigner, owner: PublicKey, mint: PublicKey): InstructionReturn;
export declare function mintToTokenAccount(mintAuthority: AsyncSigner, mint: PublicKey, tokenAccount: PublicKey, amount: number): InstructionReturn;
export declare function setMintAuthority(mint: PublicKey, currentAuthority: AsyncSigner, newAuthority: PublicKey | null): InstructionReturn;
export declare function setFreezeAuthority(mint: PublicKey, currentFreezeAuthority: AsyncSigner, newFreezeAuthority: PublicKey | null): InstructionReturn;
export declare function setAccountAuthority(tokenAccount: PublicKey, currentAuthority: AsyncSigner, newAuthority: PublicKey | null): InstructionReturn;
export declare function transferToTokenAccount(owner: AsyncSigner, source: PublicKey, destination: PublicKey, amount: number): InstructionReturn;
/**
 * Create and initialize a new associated token account with allowOwnerOffCurve
 *
 * @param payer                    Payer of the transaction and initialization fees
 * @param mint                     Mint for the account
 * @param owner                    Owner of the new account
 * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)
 * @param programId                SPL Token program account
 * @param associatedTokenProgramId SPL Associated Token program account
 *
 * @return Address of the new associated token account
 */
export declare function createAssociatedTokenAccount(mint: PublicKey, owner: PublicKey, allowOwnerOffCurve?: boolean, programId?: PublicKey, associatedTokenProgramId?: PublicKey): {
    instructions: InstructionReturn;
    address: PublicKey;
};
/**
 * Construct a CreateAssociatedTokenAccountIdempotent instruction
 *
 * Creates an associated token account for the given wallet address and token mint,
 * if it doesn't already exist.  Returns an error if the account exists,
 * but with a different owner.
 *
 * @param payer                    Payer of the transaction and initialization fees
 * @param mint                     Mint for the account
 * @param owner                    Owner of the new account
 * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)
 * @param programId                SPL Token program account
 * @param associatedTokenProgramId SPL Associated Token program account
 *
 * @return Address of the new associated token account
 */
export declare function createAssociatedTokenAccountIdempotent(mint: PublicKey, owner: PublicKey, allowOwnerOffCurve?: boolean, programId?: PublicKey, associatedTokenProgramId?: PublicKey): {
    instructions: InstructionReturn;
    address: PublicKey;
};
//# sourceMappingURL=token.d.ts.map